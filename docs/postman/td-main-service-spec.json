{
	"info": {
		"name": "Training Diary - тесты основного сервиса",
		"description": "Коллекция тестов для проверки приложения \"Training Diary\" API v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "sign-up",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "User create Fail Empty Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [не может быть пустым]\"').to.eql('[login] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [не может быть пустым]\"').to.eql('[password] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"1230000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User create First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "f56e82af-d2e4-4068-9524-3383c9fe24ea"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "d421624c-7224-4e69-9d70-57c5058e4a33"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "8a8df85e-7b9e-4f2d-870e-c6b915f762b5"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "984f846e-46c9-4cb7-85d6-9d5706e9a462"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserThird\"').to.eql('UserThird');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "7443dc2d-bdc2-4f49-a55c-3368a0c3dce2"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "0cf3d668-dce2-402d-abba-745afd8cdf02"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "65eed54d-0941-4b1a-88c9-1fd40e7c8410"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "b69cf1fb-57bf-4d47-99ff-6421f5b04e0f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "ee776208-7eb9-4c64-bd00-d9f7dc145013"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "a6a11df6-9e7a-4355-a1d8-c3b87925884b"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "1ae5b6bc-f9da-475e-ae5e-59c480ffae1e"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "87c3bbb4-c0de-49e4-9603-d277ee1a6609"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Rezervation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Такой логин зарезервирован системой\"').to.eql('Такой логин зарезервирован системой');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "a9db8ae3-3399-4a74-a0f3-10e73f6bdb3b"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "cbfed190-7e1a-4041-8473-a2069bb2afef"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-in",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "User create Fail Empty Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [не может быть пустым]\"').to.eql('[login] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [не может быть пустым]\"').to.eql('[password] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"1230000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User authorization Fail Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Такой пользователь не найден\"').to.eql('Такой пользователь не найден');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "f73bec70-0622-45fe-bebe-6ad3ca2ab186"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "397802c2-766e-445a-8c2e-385c63b484f4"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst1\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Fail Bad Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пароль указан неверно\"').to.eql('Пароль указан неверно');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "21231c69-8c3f-4486-8817-84940daa07f8"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "512412fa-7d65-4b4e-8bca-7bd7579192fb"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "5e891602-6a4b-491d-b309-3cfaaf41418d"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "36e6e950-f001-404e-9c87-6530280213a0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "0cad67ef-d901-4010-88fd-ea6aa8cc9dea"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "31f21c6b-b2b6-4305-a120-f9a42fd42d18"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"4\"').to.eql(4);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserThird\"').to.eql('UserThird');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "333327b6-0683-4ec3-be4f-e99a5251dfb5"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "7b1963ea-b8d7-4d0d-b6eb-7f31249f9c67"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-out",
					"item": [
						{
							"name": "User authorization Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "dc03cc8c-09fc-4d61-ac90-ebe2ac3f600b"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "443274a3-446e-4123-9f1a-abacb8dd2066"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "6c691f28-01dc-4187-af7f-ffc85c2f1e0c"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "45157716-9078-45be-81cb-8ee7a267c172"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut Second Fail Already Log Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"FORBIDDEN\"').to.eql('FORBIDDEN');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "934b8dfa-a644-48a6-bc0f-b4b308df0580"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "a00d88cc-5357-4999-861a-576754f3e41a"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"admin\"').to.eql('admin');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "7880f37a-33d5-4f4d-a361-343c6ded83aa"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "3329c585-504c-4702-85a2-c4ff7563b460"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "diary",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Diary create Fail Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/diary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"diary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Diary create First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "fdadad24-c390-46b3-a336-21575a520a4b"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "131dacb8-1947-437b-811d-21cbfbbf1b4f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 77.7,\n  \"growthUser\": 177.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Diary update Fail Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/diary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"diary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Diary update First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"87.7\"').to.eql(87.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"187.7\"').to.eql(187.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "794d7d96-0778-446a-b8d4-c8a1cdacc52e"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "6efc2780-d333-42d4-b96f-a242b309e35c"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 87.7,\n  \"growthUser\": 187.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Diary update Return In Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "dd7e76d3-d9d6-4ad4-93fe-e51ca2b3ad14"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "887f0493-ae44-4198-948e-d0b89d5460d9"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 77.7,\n  \"growthUser\": 177.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get",
							"item": [
								{
									"name": "Diary get First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "3110d9f0-4e5e-4d95-b84c-2c9749ff0020"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "bfbe4e1a-7b13-4159-b86d-0bcd9a202afa"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "First Diary get by Admin Fail Param Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" [userId] not validated, reason: [не может быть пустым]\"').to.eql('[userId] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "1a69c551-0685-4139-a2bc-6b0ccbc4fda5"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "902ee268-a080-4fbc-a208-b7101f1c093b"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть числом]\"').to.eql('[userId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "946b6cdd-2509-4b97-92e6-aa28a72e959a"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "db460789-6dfc-45b6-8d2e-3111426e2fd1"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть положительным]\"').to.eql('[userId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "0dc57668-fd81-454b-b7ee-14033b1fcbcf"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "876dbb17-40d2-4e11-9fce-15a27fe46787"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Такого дневника не существует\"').to.eql('Такого дневника не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "807ff8cb-97f4-42bd-9c54-a7cf7af0c7c7"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "02bcd71c-ade1-4c0d-9771-1013ab53b1f2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "First Diary get by Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has diary response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test diary 'weightUser' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('weightUser');\r",
											"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
											"});\r",
											"pm.test(\"Test diary 'growthUser' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('growthUser');\r",
											"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
											"});\r",
											"pm.test(\"Test diary 'createdOn' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('createdOn');\r",
											"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('updatedOn');\r",
											"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "4ea468e9-e525-430d-ba57-7b2fea2cdd04"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "52ffaab2-6877-48d8-8154-dcebcd508e44"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin LogOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "8f88e884-1f17-4173-accb-97122b0a1dfc"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "c4ed8959-7368-4f57-9008-9c6086f3b7bd"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "First Diary get by Admin Fail Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3df0db8a-9035-4946-81b5-7b535f08e2e7"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "5ec22a77-6b26-45e1-a457-35e8122de96e"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3c058e17-ec6f-4f1c-bb44-0051e4f0c041"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "0a05f103-0017-41ab-a008-1d7314f3cc42"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "First Diary get by Admin Fail Access Denied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"FORBIDDEN\"').to.eql('FORBIDDEN');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"У вас нет доступа к этой операции\"').to.eql('У вас нет доступа к этой операции');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "50ef3f61-c878-4606-874b-02a422ff3354"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "4b9c41a5-4474-4622-bf3b-590d68e76b2c"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "typeworkout",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "Type Workout get by User Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[typeWorkoutId] not validated, reason: [должен быть числом]]\"').to.eql('[typeWorkoutId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "c2bcca7e-55fd-436e-ba0b-b0e12c06603c"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "2556d11f-3795-4be4-8542-88ae996ce93d"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"type",
												"workout"
											],
											"query": [
												{
													"key": "typeWorkoutId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Type Workout get by User Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[typeWorkoutId] not validated, reason: [должен быть положительным]\"').to.eql('[typeWorkoutId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "aef21d72-f44e-4917-9dad-47e2772b0387"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "b4f452ff-ef1a-4bad-8c91-5c3179b2efe9"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"type",
												"workout"
											],
											"query": [
												{
													"key": "typeWorkoutId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Type Workout get by User Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Типа тренировки с таким ID не существует\"').to.eql('Типа тренировки с таким ID не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "a047ce9c-0e21-4016-8141-1438719f62b9"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "11d4491e-303d-4936-9978-30a97e68b31d"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=9999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"type",
												"workout"
											],
											"query": [
												{
													"key": "typeWorkoutId",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Walking Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Простая ходьба\"').to.eql(\"Простая ходьба\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"200\"').to.eql(200);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "8fbaf44f-39d4-40dd-9400-a1517d206ee6"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "7440872f-0c1a-44ce-ad37-4a5034d48694"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Running Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на улице\"').to.eql(\"Бег на улице\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"500\"').to.eql(500);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "27e369e5-91f5-443c-8f92-f763c7cbc851"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "3e05ec94-adad-4b79-8439-2299555eac5f"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Strength Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Силовая тренировка\"').to.eql(\"Силовая тренировка\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"520\"').to.eql(520);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Количество выполненных упражнений\"').to.eql(\"Количество выполненных упражнений\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "895dbeb7-36a3-4dff-a7ed-536692bdbe98"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "62cfcfdd-c31f-45dc-b034-b3632d0b5c8f"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Treadmill Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"4\"').to.eql(4);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на беговой дорожке\"').to.eql(\"Бег на беговой дорожке\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"400\"').to.eql(400);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "f124065a-c943-48d6-bac2-b1a6e106b7e8"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "879bb3bc-6f22-4be2-b8f1-b1fadc7a2689"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bicycling Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"5\"').to.eql(5);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Велоспорт\"').to.eql(\"Велоспорт\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"450\"').to.eql(450);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "6fde0193-0d0d-42a3-854b-eaefd76d6031"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "5a87e559-5ab2-4277-a902-10f11b3de65b"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Yoga Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"6\"').to.eql(6);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Занятия йогой\"').to.eql(\"Занятия йогой\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"225\"').to.eql(225);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "90538ecb-fe01-4150-9b43-0c9ecf105e7e"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "aa9a4602-876c-42c7-b3da-1201ee425008"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=6",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Swiming Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"7\"').to.eql(7);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Плавать в бассейне\"').to.eql(\"Плавать в бассейне\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"350\"').to.eql(350);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "22617f66-4f6c-4fbd-899c-811e66e897e8"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "ea1f017c-7026-4ca3-b5ec-cf96305cc43a"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=7",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tennis Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"8\"').to.eql(8);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Игра в теннис\"').to.eql(\"Игра в теннис\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"400\"').to.eql(400);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "142ff55b-6c99-4765-91b5-c204df29389a"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "38204d9c-76b4-4fc5-b4e0-08af5bb339c6"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=8",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Skiing Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"9\"').to.eql(9);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Ходьба на лыжах\"').to.eql(\"Ходьба на лыжах\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"485\"').to.eql(485);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "6ce4baf3-ffcf-4c41-b91d-0616ee81eccf"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "19718afd-eacb-474d-aa3e-6a699b285072"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=9",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ALL Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.equal(9);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Простая ходьба\"').to.eql(\"Простая ходьба\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[1];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на улице\"').to.eql(\"Бег на улице\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[2];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Силовая тренировка\"').to.eql(\"Силовая тренировка\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[3];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"4\"').to.eql(4);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на беговой дорожке\"').to.eql(\"Бег на беговой дорожке\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[4];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"5\"').to.eql(5);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Велоспорт\"').to.eql(\"Велоспорт\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[5];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"6\"').to.eql(6);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Занятия йогой\"').to.eql(\"Занятия йогой\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[6];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"7\"').to.eql(7);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Плавать в бассейне\"').to.eql(\"Плавать в бассейне\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[7];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"8\"').to.eql(8);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Игра в теннис\"').to.eql(\"Игра в теннис\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[8];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"9\"').to.eql(9);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Ходьба на лыжах\"').to.eql(\"Ходьба на лыжах\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "72792a2b-a3c1-4376-94b0-509746df73d8"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "84ce4dab-8670-4bad-8c2b-69e7e73afebd"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "d5675d16-8f8f-4bbb-8797-36e9233cc1e7"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "c9ca732f-4480-42a6-9514-fdc2e9f73dbe"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ALL Type Workout FAIL Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3157db7b-82ad-4f26-9df9-6481a5490fc2"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "434947e7-15ea-40d4-94db-dfe100547ab0"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Create Type Workout FAIL Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "9e2c0c21-f3cd-46fb-aed2-d950af954e3d"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "265ee1d6-fb3d-45d6-b753-4c5b1a30b317"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"admin\"').to.eql('admin');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "07fefe72-024e-44e6-b44d-2064d4fe04c3"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "dc76976c-dec2-4683-9ff8-5e93c888a16d"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"10\"').to.eql(10);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 10\"').to.eql(\"Тренировка 10\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"248\"').to.eql(248);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "a1e84bb9-618a-42eb-90d7-63c437294440"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "32965353-7368-4257-a5a2-893603a18c6c"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeName\": \"Тренировка 10\",\r\n  \"caloriePerHour\": 248,\r\n  \"detailOfTypeId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"11\"').to.eql(11);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 11\"').to.eql(\"Тренировка 11\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"156\"').to.eql(156);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Количество выполненных упражнений\"').to.eql(\"Количество выполненных упражнений\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "b863d708-61fa-4bc1-a02e-5978c8e6b654"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "8e51631b-1c80-411f-a9a3-756172045423"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeName\": \"Тренировка 11\",\r\n  \"caloriePerHour\": 156,\r\n  \"detailOfTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"12\"').to.eql(12);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 12\"').to.eql(\"Тренировка 12\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"777\"').to.eql(777);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "9338df0f-d9bc-44f0-8811-3084fc54a7ea"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "5e828c45-59e4-46fe-b35c-b62b52702f73"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeName\": \"Тренировка 12\",\r\n  \"caloriePerHour\": 777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"10\"').to.eql(10);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка обновленная 10\"').to.eql(\"Тренировка обновленная 10\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"249\"').to.eql(249);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Количество выполненных упражнений\"').to.eql(\"Количество выполненных упражнений\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "621ee66a-7219-41cc-a816-9eb8639a84cc"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "ff6f4e06-f042-4b9d-bd42-9eb51eb2d02c"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeWorkoutId\": 10,\r\n  \"typeName\": \"Тренировка обновленная 10\",\r\n  \"caloriePerHour\": 249,\r\n  \"detailOfTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"11\"').to.eql(11);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка обновленная 11\"').to.eql(\"Тренировка обновленная 11\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"157\"').to.eql(157);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3429e666-e5eb-4b08-86a2-ca14778eadbc"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "69305653-c837-4e8f-8176-6fe8ff40af67"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeWorkoutId\": 11,\r\n  \"typeName\": \"Тренировка обновленная 11\",\r\n  \"caloriePerHour\": 157,\r\n  \"detailOfTypeId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"12\"').to.eql(12);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 12\"').to.eql(\"Тренировка 12\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"7777\"').to.eql(7777);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "d7cb5316-1f35-47ad-b0a8-e46c832d302d"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "882b2945-f891-4a1d-88d3-0039a9d06a34"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeWorkoutId\": 12,\r\n  \"typeName\": \"Тренировка 12\",\r\n  \"caloriePerHour\": 7777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin Fail Empty TypeName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[typeName] not validated, reason: [не может быть пустым]\"').to.eql('[typeName] not validated, reason: [не может быть пустым]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3f70b84d-827b-4e56-9fc3-693d76935203"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "74b534c4-cff7-491b-9e30-54ab9a80595c"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeName\": \"\",\r\n  \"caloriePerHour\": 777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin Fail Empty TypeName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[typeName] not validated, reason: [не может быть пустым]\"').to.eql('[typeName] not validated, reason: [не может быть пустым]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "2133ad53-f5cc-4133-a995-3306d779a48f"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "a49fb5e6-8c3c-403a-88b1-212f908767ee"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeWorkoutId\": 12,\r\n  \"typeName\": \" \",\r\n  \"caloriePerHour\": 7777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "audit",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "Get History Fail Param Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" [userId] not validated, reason: [не может быть пустым]\"').to.eql('[userId] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "86e4f36f-a448-4bec-8017-22ab95ba7647"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "468d0158-f6b2-46f4-ad85-af06c513ae9e"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get History Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть числом]\"').to.eql('[userId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "81d8ddc6-1a96-47d9-993c-c7496e18a65f"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "e4c8393d-1102-4e85-b972-db333c2d1847"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get History Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть положительным]\"').to.eql('[userId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "8121728f-fa67-4f81-a4f9-e7cd88f8d083"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "96932cbc-7610-4239-a303-a057a06148db"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get History Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Такого пользователя не существует\"').to.eql('Такого пользователя не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "2dffccbd-5987-4558-9c73-3eb617e01336"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "cc0307c6-4287-4fa8-a6ad-5584c908fce2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "5"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get History Admin by Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has audit response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "6fb05281-7217-45d8-88d7-7bc6fbf83a95"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "0420e8d7-a123-435c-95fe-7123a31a1e6f"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/audit?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"audit"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "workout",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "Create Workout First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "407ddc59-997a-401f-896f-ef23a7616ea1"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "1a3e85c2-53b5-4443-bee6-867012542693"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Workout Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "56e5bd4a-226a-4a4b-8eed-20aa4ae30c6f"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "5a9c7dfd-1b5e-4899-87f7-abde2163e48f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 5,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя вторая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Workout Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "cc74f9f8-be1d-4f38-b998-d19589361e48"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "88b455f4-9822-4f0a-a3b2-52ca8425e235"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 2,\r\n  \"timeStartOn\": \"07-05-2024 13:00\",\r\n  \"timeEndOn\": \"07-05-2024 17:00\",\r\n  \"timeOfRest\": 21,\r\n  \"currentWeightUser\": 81.5,\r\n  \"personalNote\": \"Моя первая обновленная тренировка\",\r\n  \"detailOfWorkout\": \"2 км\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Workout Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has audit response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "4b920b61-a5d6-46be-b7a0-f6f8763c90b0"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "8ac99b4e-24e8-4e32-814d-311dc6fc8035"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/workout?workoutId=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									],
									"query": [
										{
											"key": "workoutId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Workouts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has audit response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "2c1c950c-dbe7-4657-807b-a67830d3ebc3"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "877362da-c2ff-4772-8eb5-7863ae81d666"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Workout Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "ece886fe-cf58-478f-9326-277841a37542"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "ef98a82b-ad03-40af-bf20-570801e7466d"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/workout?workoutId=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									],
									"query": [
										{
											"key": "workoutId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Workout Second After Delete Fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Тренировки с таким ID не существует\"').to.eql('Тренировки с таким ID не существует');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "e0124619-b4ad-4928-aebd-4bb9552ba7cd"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "18adb9fe-c5de-4e8e-b0ae-c0460259d6d2"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/workout?workoutId=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"workout"
									],
									"query": [
										{
											"key": "workoutId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Get All Workouts By Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has audit response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "7806c8cb-503b-41fa-93f2-89b49484509e"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "21059e91-1bc5-4c45-abf1-c1c7141e5987"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/workout?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"workout"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		}
	]
}