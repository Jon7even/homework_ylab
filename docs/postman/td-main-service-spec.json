{
	"info": {
		"name": "Training Diary - тесты основного сервиса",
		"description": "Коллекция тестов для проверки приложения \"Training Diary\" API v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "sign-up",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "User create Fail Empty Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [не может быть пустым]\"').to.eql('[login] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [не может быть пустым]\"').to.eql('[password] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"1230000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User create First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserThird\"').to.eql('UserThird');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Rezervation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Такой логин зарезервирован системой\"').to.eql('Такой логин зарезервирован системой');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-in",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "User create Fail Empty Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [не может быть пустым]\"').to.eql('[login] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [не может быть пустым]\"').to.eql('[password] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"1230000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User authorization Fail Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Такой пользователь не найден\"').to.eql('Такой пользователь не найден');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst1\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Fail Bad Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пароль указан неверно\"').to.eql('Пароль указан неверно');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"4\"').to.eql(4);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserThird\"').to.eql('UserThird');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-out",
					"item": [
						{
							"name": "User authorization Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut Second Fail Already Log Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"FORBIDDEN\"').to.eql('FORBIDDEN');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"admin\"').to.eql('admin');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "diary",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Diary create Fail Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/diary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"diary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Diary create First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 77.7,\n  \"growthUser\": 177.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Diary update Fail Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/diary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"diary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Diary update First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"87.7\"').to.eql(87.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"187.7\"').to.eql(187.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 87.7,\n  \"growthUser\": 187.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Diary update Return In Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 77.7,\n  \"growthUser\": 177.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get",
							"item": [
								{
									"name": "Diary get First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has diary response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "First Diary get by Admin Fail Param Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" [userId] not validated, reason: [не может быть пустым]\"').to.eql('[userId] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть числом]\"').to.eql('[userId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть положительным]\"').to.eql('[userId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Дневника с таким ID не существует\"').to.eql('Дневника с таким ID не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "First Diary get by Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has diary response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test diary 'weightUser' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('weightUser');\r",
											"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
											"});\r",
											"pm.test(\"Test diary 'growthUser' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('growthUser');\r",
											"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
											"});\r",
											"pm.test(\"Test diary 'createdOn' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('createdOn');\r",
											"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('updatedOn');\r",
											"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin LogOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "First Diary get by Admin Fail Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "First Diary get by Admin Fail Access Denied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"FORBIDDEN\"').to.eql('FORBIDDEN');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"У вас нет доступа к этой операции\"').to.eql('У вас нет доступа к этой операции');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "typeworkout",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "Type Workout get by User Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[typeWorkoutId] not validated, reason: [должен быть числом]]\"').to.eql('[typeWorkoutId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"type",
												"workout"
											],
											"query": [
												{
													"key": "typeWorkoutId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Type Workout get by User Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[typeWorkoutId] not validated, reason: [должен быть положительным]\"').to.eql('[typeWorkoutId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"type",
												"workout"
											],
											"query": [
												{
													"key": "typeWorkoutId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Type Workout get by User Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Типа тренировки с таким ID не существует\"').to.eql('Типа тренировки с таким ID не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=9999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"type",
												"workout"
											],
											"query": [
												{
													"key": "typeWorkoutId",
													"value": "9999"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Walking Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Простая ходьба\"').to.eql(\"Простая ходьба\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"200\"').to.eql(200);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Running Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на улице\"').to.eql(\"Бег на улице\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"500\"').to.eql(500);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Strength Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Силовая тренировка\"').to.eql(\"Силовая тренировка\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"520\"').to.eql(520);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Количество выполненных упражнений\"').to.eql(\"Количество выполненных упражнений\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Treadmill Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"4\"').to.eql(4);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на беговой дорожке\"').to.eql(\"Бег на беговой дорожке\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"400\"').to.eql(400);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bicycling Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"5\"').to.eql(5);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Велоспорт\"').to.eql(\"Велоспорт\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"450\"').to.eql(450);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=5",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Yoga Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"6\"').to.eql(6);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Занятия йогой\"').to.eql(\"Занятия йогой\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"225\"').to.eql(225);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=6",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Swiming Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"7\"').to.eql(7);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Плавать в бассейне\"').to.eql(\"Плавать в бассейне\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"350\"').to.eql(350);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=7",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Tennis Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"8\"').to.eql(8);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Игра в теннис\"').to.eql(\"Игра в теннис\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"400\"').to.eql(400);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=8",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Skiing Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"9\"').to.eql(9);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Ходьба на лыжах\"').to.eql(\"Ходьба на лыжах\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"485\"').to.eql(485);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout?typeWorkoutId=9",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									],
									"query": [
										{
											"key": "typeWorkoutId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ALL Type Workout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.equal(9);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Простая ходьба\"').to.eql(\"Простая ходьба\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[1];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на улице\"').to.eql(\"Бег на улице\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[2];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Силовая тренировка\"').to.eql(\"Силовая тренировка\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[3];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"4\"').to.eql(4);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Бег на беговой дорожке\"').to.eql(\"Бег на беговой дорожке\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[4];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"5\"').to.eql(5);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Велоспорт\"').to.eql(\"Велоспорт\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[5];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"6\"').to.eql(6);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Занятия йогой\"').to.eql(\"Занятия йогой\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[6];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"7\"').to.eql(7);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Плавать в бассейне\"').to.eql(\"Плавать в бассейне\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[7];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"8\"').to.eql(8);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Игра в теннис\"').to.eql(\"Игра в теннис\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 1 'id' field\", function () {\r",
											"    var jsonData = pm.response.json()[8];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"9\"').to.eql(9);\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Ходьба на лыжах\"').to.eql(\"Ходьба на лыжах\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ALL Type Workout FAIL Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"type",
										"workout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Create Type Workout FAIL Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 \", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"admin\"').to.eql('admin');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"10\"').to.eql(10);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 10\"').to.eql(\"Тренировка 10\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"248\"').to.eql(248);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeName\": \"Тренировка 10\",\r\n  \"caloriePerHour\": 248,\r\n  \"detailOfTypeId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"11\"').to.eql(11);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 11\"').to.eql(\"Тренировка 11\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"156\"').to.eql(156);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Количество выполненных упражнений\"').to.eql(\"Количество выполненных упражнений\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeName\": \"Тренировка 11\",\r\n  \"caloriePerHour\": 156,\r\n  \"detailOfTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"12\"').to.eql(12);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 12\"').to.eql(\"Тренировка 12\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"777\"').to.eql(777);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeName\": \"Тренировка 12\",\r\n  \"caloriePerHour\": 777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"10\"').to.eql(10);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка обновленная 10\"').to.eql(\"Тренировка обновленная 10\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"249\"').to.eql(249);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Количество выполненных упражнений\"').to.eql(\"Количество выполненных упражнений\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeWorkoutId\": 10,\r\n  \"typeName\": \"Тренировка обновленная 10\",\r\n  \"caloriePerHour\": 249,\r\n  \"detailOfTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"11\"').to.eql(11);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка обновленная 11\"').to.eql(\"Тренировка обновленная 11\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"157\"').to.eql(157);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Пройденное расстояние (м)\"').to.eql(\"Пройденное расстояние (м)\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"true\"').to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 1,\r\n  \"typeWorkoutId\": 11,\r\n  \"typeName\": \"Тренировка обновленная 11\",\r\n  \"caloriePerHour\": 157,\r\n  \"detailOfTypeId\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has Type of Workout response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeWorkoutId' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeWorkoutId');\r",
											"    pm.expect(jsonData.typeWorkoutId, '\"typeWorkoutId\" must be \"12\"').to.eql(12);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'typeName' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('typeName');\r",
											"    pm.expect(jsonData.typeName, '\"typeName\" must be \"Тренировка 12\"').to.eql(\"Тренировка 12\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'caloriePerHour' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('caloriePerHour');\r",
											"    pm.expect(jsonData.caloriePerHour, '\"caloriePerHour\" must be \"7777\"').to.eql(7777);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('detailOfTypeWorkoutResponseDto');\r",
											"    pm.expect(jsonData.detailOfTypeWorkoutResponseDto, '\"detailOfTypeWorkoutResponseDto\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.id' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.name' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('name');\r",
											"    pm.expect(jsonData.name, '\"name\" must be \"Занятие не требует дополнительных параметров\"').to.eql(\"Занятие не требует дополнительных параметров\");\r",
											"});\r",
											"pm.test(\"Test Type of Workout 'detailOfTypeWorkoutResponseDto.isFillingRequired' field\", function () {\r",
											"    var jsonData = pm.response.json().detailOfTypeWorkoutResponseDto;\r",
											"    pm.expect(jsonData).to.have.property('isFillingRequired');\r",
											"    pm.expect(jsonData.isFillingRequired, '\"isFillingRequired\" must be \"false\"').to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeWorkoutId\": 12,\r\n  \"typeName\": \"Тренировка 12\",\r\n  \"caloriePerHour\": 7777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Type Workout by Admin Fail Empty TypeName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[typeName] not validated, reason: [не может быть пустым]\"').to.eql('[typeName] not validated, reason: [не может быть пустым]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeName\": \"\",\r\n  \"caloriePerHour\": 777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Type Workout by Admin Fail Empty TypeName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[typeName] not validated, reason: [не может быть пустым]\"').to.eql('[typeName] not validated, reason: [не может быть пустым]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"requesterId\": 4,\r\n  \"typeWorkoutId\": 12,\r\n  \"typeName\": \" \",\r\n  \"caloriePerHour\": 7777,\r\n  \"detailOfTypeId\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/type/workout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"type",
										"workout"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "audit",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "Get History Fail Param Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" [userId] not validated, reason: [не может быть пустым]\"').to.eql('[userId] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get History Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть числом]\"').to.eql('[userId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get History Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть положительным]\"').to.eql('[userId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get History Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Такого пользователя не существует\"').to.eql('Такого пользователя не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/audit?userId=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"audit"
											],
											"query": [
												{
													"key": "userId",
													"value": "5"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get History Admin by Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has audit response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/audit?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"audit"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "workout",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Create Workout Fail IdTypeWorkout Positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[idTypeWorkout] not validated, reason: [должен быть положительным]\"').to.eql('[idTypeWorkout] not validated, reason: [должен быть положительным]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 0,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail IdTypeWorkout Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[idTypeWorkout] not validated, reason: [не может быть пустым]\"').to.eql('[idTypeWorkout] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeStartOn Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[Object DTO] not validated, reason: [не может быть пустым]\"').to.eql('[Object DTO] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeStartOn Future",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeStartOn] not validated, reason: [не может быть в будущем]\"').to.eql('[timeStartOn] not validated, reason: [не может быть в будущем]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2037 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeEndOn Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[Object DTO] not validated, reason: [не может быть пустым]\"').to.eql('[Object DTO] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeEndOn After Start",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeEndOn] not validated, reason: [не может быть раньше начала тренировки]\"').to.eql('[timeEndOn] not validated, reason: [не может быть раньше начала тренировки]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n    \"timeEndOn\": \"07-05-2024 11:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeEndOn  Before Start Day",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeEndOn] not validated, reason: [не может быть указано следующим днем]\"').to.eql('[timeEndOn] not validated, reason: [не может быть указано следующим днем]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n    \"timeEndOn\": \"08-05-2024 11:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeOfRest Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeOfRest] not validated, reason: [не может быть пустым]\"').to.eql('[timeOfRest] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": \"\",\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeOfRest Positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeOfRest] not validated, reason: [должен быть положительным]\"').to.eql('[timeOfRest] not validated, reason: [должен быть положительным]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": \"-1\",\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail timeOfRest More Workout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeOfRest] not validated, reason: [не может быть больше чем сама тренировка]\"').to.eql('[timeOfRest] not validated, reason: [не может быть больше чем сама тренировка]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": \"400\",\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail currentWeightUser Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[currentWeightUser] not validated, reason: [не может быть пустым]\"').to.eql('[currentWeightUser] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail personalNote Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[personalNote] not validated, reason: [не может быть пустым]\"').to.eql('[personalNote] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \" \",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workout Fail detailOfWorkout Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[detailOfWorkout] not validated, reason: [не может быть пустым]\"').to.eql('[detailOfWorkout] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \" \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create Workout First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has Workout response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/workout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workout Second",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has Workout response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 5,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя вторая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/workout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workout Second Fail Already Exist Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"CONFLICT\"').to.eql('CONFLICT');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Тренировка с таким типом уже внесена в этот день\"').to.eql('Тренировка с таким типом уже внесена в этот день');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 5,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя вторая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/workout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Update Workout Fail IdTypeWorkout Positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[idTypeWorkout] not validated, reason: [должен быть положительным]\"').to.eql('[idTypeWorkout] not validated, reason: [должен быть положительным]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 0,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail IdTypeWorkout Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[idTypeWorkout] not validated, reason: [не может быть пустым]\"').to.eql('[idTypeWorkout] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeStartOn Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[Object DTO] not validated, reason: [не может быть пустым]\"').to.eql('[Object DTO] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeStartOn Future",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeStartOn] not validated, reason: [не может быть в будущем]\"').to.eql('[timeStartOn] not validated, reason: [не может быть в будущем]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2037 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeEndOn Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[Object DTO] not validated, reason: [не может быть пустым]\"').to.eql('[Object DTO] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeEndOn After Start",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeEndOn] not validated, reason: [не может быть раньше начала тренировки]\"').to.eql('[timeEndOn] not validated, reason: [не может быть раньше начала тренировки]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n    \"timeEndOn\": \"07-05-2024 11:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeEndOn  Before Start Day",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeEndOn] not validated, reason: [не может быть указано следующим днем]\"').to.eql('[timeEndOn] not validated, reason: [не может быть указано следующим днем]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n    \"timeEndOn\": \"08-05-2024 11:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeOfRest Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeOfRest] not validated, reason: [не может быть пустым]\"').to.eql('[timeOfRest] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": \"\",\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeOfRest Positive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeOfRest] not validated, reason: [должен быть положительным]\"').to.eql('[timeOfRest] not validated, reason: [должен быть положительным]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": \"-1\",\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail timeOfRest More Workout",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[timeOfRest] not validated, reason: [не может быть больше чем сама тренировка]\"').to.eql('[timeOfRest] not validated, reason: [не может быть больше чем сама тренировка]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": \"400\",\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail currentWeightUser Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[currentWeightUser] not validated, reason: [не может быть пустым]\"').to.eql('[currentWeightUser] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail personalNote Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[personalNote] not validated, reason: [не может быть пустым]\"').to.eql('[personalNote] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \" \",\r\n  \"detailOfWorkout\": \"1 км\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Workout Fail detailOfWorkout Not Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"[detailOfWorkout] not validated, reason: [не может быть пустым]\"').to.eql('[detailOfWorkout] not validated, reason: [не может быть пустым]');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 1,\r\n  \"timeStartOn\": \"07-05-2024 12:00\",\r\n  \"timeEndOn\": \"07-05-2024 16:00\",\r\n  \"timeOfRest\": 20,\r\n  \"currentWeightUser\": 85.5,\r\n  \"personalNote\": \"Моя первая тренировка\",\r\n  \"detailOfWorkout\": \" \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/workout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"workout"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update Workout Second",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has Workout response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": 1,\r\n  \"idDiary\": 1,\r\n  \"idTypeWorkout\": 2,\r\n  \"timeStartOn\": \"07-05-2024 13:00\",\r\n  \"timeEndOn\": \"07-05-2024 17:00\",\r\n  \"timeOfRest\": 21,\r\n  \"currentWeightUser\": 81.5,\r\n  \"personalNote\": \"Моя первая обновленная тренировка\",\r\n  \"detailOfWorkout\": \"2 км\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/workout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get",
							"item": [
								{
									"name": "Get Workout Second",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has audit response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout?workoutId=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											],
											"query": [
												{
													"key": "workoutId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Workout Fail WorkoutId Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[workoutId] not validated, reason: [должен быть положительным]\"').to.eql('[workoutId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout?workoutId=-2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											],
											"query": [
												{
													"key": "workoutId",
													"value": "-2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Workout Fail WorkoutId Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[workoutId] not validated, reason: [должен быть числом]\"').to.eql('[workoutId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout?workoutId=dfg",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											],
											"query": [
												{
													"key": "workoutId",
													"value": "dfg"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Workout Fail WorkoutId Null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[workoutId] not validated, reason: [не может быть пустым]\"').to.eql('[workoutId] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout?workoutId=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											],
											"query": [
												{
													"key": "workoutId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Workouts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has audit response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "Delete Workout Second",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout?workoutId=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											],
											"query": [
												{
													"key": "workoutId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Workout Second After Delete Fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Тренировки с таким ID не существует\"').to.eql('Тренировки с таким ID не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/workout?workoutId=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"workout"
											],
											"query": [
												{
													"key": "workoutId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "Get All Workouts By Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has audit response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/workout?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"workout"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Workouts By Admin Fail UserId Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть положительным]\"').to.eql('[userId] not validated, reason: [должен быть положительным]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/workout?userId=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"workout"
									],
									"query": [
										{
											"key": "userId",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Workouts By Admin Fail UserId Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть числом]\"').to.eql('[userId] not validated, reason: [должен быть числом]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/workout?userId=asd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"workout"
									],
									"query": [
										{
											"key": "userId",
											"value": "asd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Workouts By Admin Fail UserId Null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [не может быть пустым]\"').to.eql('[userId] not validated, reason: [не может быть пустым]');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/workout?userId=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"workout"
									],
									"query": [
										{
											"key": "userId",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		}
	]
}