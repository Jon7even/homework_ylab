{
	"info": {
		"name": "Training Diary - тесты основного сервиса",
		"description": "Коллекция тестов для проверки приложения \"Training Diary\" API v1.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "sign-up",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "User create Fail Empty Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [не может быть пустым]\"').to.eql('[login] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [не может быть пустым]\"').to.eql('[password] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"1230000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-up",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-up"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User create First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "f56e82af-d2e4-4068-9524-3383c9fe24ea"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "d421624c-7224-4e69-9d70-57c5058e4a33"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "8a8df85e-7b9e-4f2d-870e-c6b915f762b5"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "984f846e-46c9-4cb7-85d6-9d5706e9a462"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserThird\"').to.eql('UserThird');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "7443dc2d-bdc2-4f49-a55c-3368a0c3dce2"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "0cf3d668-dce2-402d-abba-745afd8cdf02"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "65eed54d-0941-4b1a-88c9-1fd40e7c8410"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "b69cf1fb-57bf-4d47-99ff-6421f5b04e0f"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "ee776208-7eb9-4c64-bd00-d9f7dc145013"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "a6a11df6-9e7a-4355-a1d8-c3b87925884b"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Exist Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пользователь уже есть в системе\"').to.eql('Пользователь уже есть в системе');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "1ae5b6bc-f9da-475e-ae5e-59c480ffae1e"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "87c3bbb4-c0de-49e4-9603-d277ee1a6609"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						},
						{
							"name": "User create Fail Login Rezervation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Такой логин зарезервирован системой\"').to.eql('Такой логин зарезервирован системой');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "a9db8ae3-3399-4a74-a0f3-10e73f6bdb3b"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "cbfed190-7e1a-4041-8473-a2069bb2afef"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-up"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-in",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "User create Fail Empty Body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [не может быть пустым]\"').to.eql('[login] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Login Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" must be \"[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]\"').to.eql('[login] not validated, reason: [количество символов в поле должно находиться в диапазоне от 3 до 64 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"12\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Empty Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [не может быть пустым]\"').to.eql('[password] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								},
								{
									"name": "User create Fail Size Password Max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]\"').to.eql('[password] not validated, reason: [количество символов в поле должно находиться в диапазоне от 4 до 128 символов]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"123\",\r\n    \"password\": \"1230000000000000000000000000000000000000000000000000000000000000012300000000000000000000000000000000000000000000000000000000000000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/auth/sign-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"auth",
												"sign-in"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "User authorization Fail Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"NOT_FOUND\"').to.eql('NOT_FOUND');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Такой пользователь не найден\"').to.eql('Такой пользователь не найден');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "f73bec70-0622-45fe-bebe-6ad3ca2ab186"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "397802c2-766e-445a-8c2e-385c63b484f4"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst1\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Fail Bad Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"message\" must be \"Пароль указан неверно\"').to.eql('Пароль указан неверно');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "21231c69-8c3f-4486-8817-84940daa07f8"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "512412fa-7d65-4b4e-8bca-7bd7579192fb"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "5e891602-6a4b-491d-b309-3cfaaf41418d"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "36e6e950-f001-404e-9c87-6530280213a0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "0cad67ef-d901-4010-88fd-ea6aa8cc9dea"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "31f21c6b-b2b6-4305-a120-f9a42fd42d18"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Third",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"4\"').to.eql(4);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserThird\"').to.eql('UserThird');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "333327b6-0683-4ec3-be4f-e99a5251dfb5"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "7b1963ea-b8d7-4d0d-b6eb-7f31249f9c67"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserThird\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "sign-out",
					"item": [
						{
							"name": "User authorization Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"3\"').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserSecond\"').to.eql('UserSecond');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "dc03cc8c-09fc-4d61-ac90-ebe2ac3f600b"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "443274a3-446e-4123-9f1a-abacb8dd2066"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserSecond\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut Second",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "6c691f28-01dc-4187-af7f-ffc85c2f1e0c"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "45157716-9078-45be-81cb-8ee7a267c172"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "User LogOut Second Fail Already Log Out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"FORBIDDEN\"').to.eql('FORBIDDEN');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "934b8dfa-a644-48a6-bc0f-b4b308df0580"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "a00d88cc-5357-4999-861a-576754f3e41a"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"admin\"').to.eql('admin');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"1\"').to.eql(1);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "7880f37a-33d5-4f4d-a361-343c6ded83aa"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "3329c585-504c-4702-85a2-c4ff7563b460"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"admin\",\n  \"password\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "diary",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Diary create Fail Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/diary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"diary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Diary create First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has user create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "fdadad24-c390-46b3-a336-21575a520a4b"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "131dacb8-1947-437b-811d-21cbfbbf1b4f"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 77.7,\n  \"growthUser\": 177.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "validation",
									"item": [
										{
											"name": "Diary update Fail Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
															"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
															"});\r",
															"pm.test(\"Has ApiError response\", function () {\r",
															"    pm.response.to.be.withBody;\r",
															"    pm.response.to.be.json;\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property('reason');\r",
															"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
															"    pm.expect(jsonData).to.have.property('message');\r",
															"    pm.expect(jsonData.message, '\"message\" must be \"Тело запроса не может быть пустым\"').to.eql('Тело запроса не может быть пустым');\r",
															"    pm.expect(jsonData).to.have.property('timestamp');\r",
															"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/user/diary",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"user",
														"diary"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Diary update First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has user create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"87.7\"').to.eql(87.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"187.7\"').to.eql(187.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "794d7d96-0778-446a-b8d4-c8a1cdacc52e"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "6efc2780-d333-42d4-b96f-a242b309e35c"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 87.7,\n  \"growthUser\": 187.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Diary update Return In Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has user create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "dd7e76d3-d9d6-4ad4-93fe-e51ca2b3ad14"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "887f0493-ae44-4198-948e-d0b89d5460d9"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"weightUser\": 77.7,\n  \"growthUser\": 177.7\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get",
							"item": [
								{
									"name": "Diary get First",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has user create response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"pm.test(\"Test diary 'weightUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('weightUser');\r",
													"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
													"});\r",
													"pm.test(\"Test diary 'growthUser' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('growthUser');\r",
													"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
													"});\r",
													"pm.test(\"Test diary 'createdOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('createdOn');\r",
													"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
													"});\r",
													"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('updatedOn');\r",
													"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "3110d9f0-4e5e-4d95-b84c-2c9749ff0020"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "bfbe4e1a-7b13-4159-b86d-0bcd9a202afa"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/user/diary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"diary"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "validation",
							"item": [
								{
									"name": "First Diary get by Admin Fail Param Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"message\" [userId] not validated, reason: [не может быть пустым]\"').to.eql('[userId] not validated, reason: [не может быть пустым]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "1a69c551-0685-4139-a2bc-6b0ccbc4fda5"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "902ee268-a080-4fbc-a208-b7101f1c093b"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Param String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть числом]\"').to.eql('[userId] not validated, reason: [должен быть числом]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "946b6cdd-2509-4b97-92e6-aa28a72e959a"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "db460789-6dfc-45b6-8d2e-3111426e2fd1"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=param",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "param"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Param Exist Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"[userId] not validated, reason: [должен быть положительным]\"').to.eql('[userId] not validated, reason: [должен быть положительным]');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "0dc57668-fd81-454b-b7ee-14033b1fcbcf"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "876dbb17-40d2-4e11-9fce-15a27fe46787"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "First Diary get by Admin Fail Not Exist Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
													"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
													"});\r",
													"pm.test(\"Has ApiError response\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property('reason');\r",
													"    pm.expect(jsonData.reason, '\"reason\" must be \"BAD_REQUEST\"').to.eql('BAD_REQUEST');\r",
													"    pm.expect(jsonData).to.have.property('message');\r",
													"    pm.expect(jsonData.message, '\"Такого дневника не существует\"').to.eql('Такого дневника не существует');\r",
													"    pm.expect(jsonData).to.have.property('timestamp');\r",
													"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"uuid": "807ff8cb-97f4-42bd-9c54-a7cf7af0c7c7"
											},
											{
												"key": "Accept",
												"value": "*/*",
												"uuid": "02bcd71c-ade1-4c0d-9771-1013ab53b1f2"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/diary?userId=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"diary"
											],
											"query": [
												{
													"key": "userId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "First Diary get by Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test diary 'weightUser' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('weightUser');\r",
											"    pm.expect(jsonData.weightUser, '\"weightUser\" must be \"77.7\"').to.eql(77.7);\r",
											"});\r",
											"pm.test(\"Test diary 'growthUser' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('growthUser');\r",
											"    pm.expect(jsonData.growthUser, '\"growthUser\" must be \"177.7\"').to.eql(177.7);\r",
											"});\r",
											"pm.test(\"Test diary 'createdOn' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('createdOn');\r",
											"    pm.expect(jsonData.createdOn, '\"createdOn\" must be not empty').to.not.empty;\r",
											"});\r",
											"pm.test(\"Test diary 'updatedOn' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('updatedOn');\r",
											"    pm.expect(jsonData.updatedOn, '\"updatedOn\" must be not empty').to.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "4ea468e9-e525-430d-ba57-7b2fea2cdd04"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "52ffaab2-6877-48d8-8154-dcebcd508e44"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin LogOut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "8f88e884-1f17-4173-accb-97122b0a1dfc"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "c4ed8959-7368-4f57-9008-9c6086f3b7bd"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "First Diary get by Admin Fail Not Authorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"UNAUTHORIZED\"').to.eql('UNAUTHORIZED');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"Вы не авторизованы\"').to.eql('Вы не авторизованы');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3df0db8a-9035-4946-81b5-7b535f08e2e7"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "5ec22a77-6b26-45e1-a457-35e8122de96e"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User authorization First",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has user create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test user 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test user 'login' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('login');\r",
											"    pm.expect(jsonData.login, '\"login\" must be \"UserFirst\"').to.eql('UserFirst');\r",
											"});\r",
											"pm.test(\"Test user 'idGroupPermissions' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('idGroupPermissions');\r",
											"    pm.expect(jsonData.idGroupPermissions, '\"idGroupPermissions\" must be \"2\"').to.eql(2);\r",
											"});\r",
											"pm.test(\"Cookie JSESSIONID is present\", () => {\r",
											"  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "3c058e17-ec6f-4f1c-bb44-0051e4f0c041"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "0a05f103-0017-41ab-a008-1d7314f3cc42"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"login\": \"UserFirst\",\n  \"password\": \"pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"sign-in"
									]
								}
							},
							"response": []
						},
						{
							"name": "First Diary get by Admin Fail Access denied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([403]);\r",
											"});\r",
											"pm.test(\"Content-Type header is application/json;charset=UTF-8\", () => {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=UTF-8');\r",
											"});\r",
											"pm.test(\"Has ApiError response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('reason');\r",
											"    pm.expect(jsonData.reason, '\"reason\" must be \"FORBIDDEN\"').to.eql('FORBIDDEN');\r",
											"    pm.expect(jsonData).to.have.property('message');\r",
											"    pm.expect(jsonData.message, '\"У вас нет доступа к этой операции\"').to.eql('У вас нет доступа к этой операции');\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" must be not empty').to.not.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"uuid": "50ef3f61-c878-4606-874b-02a422ff3354"
									},
									{
										"key": "Accept",
										"value": "*/*",
										"uuid": "4b9c41a5-4474-4622-bf3b-590d68e76b2c"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/diary?userId=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"diary"
									],
									"query": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api",
			"type": "string"
		}
	]
}